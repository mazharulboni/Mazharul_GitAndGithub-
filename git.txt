Git is a popular version control system that allows developers to track changes in their code over time. It was created by Linus Torvalds in 2005 and has since become the de facto standard for version control in software development.

Git makes it easy to collaborate with other developers on a project by allowing multiple users to work on the same codebase simultaneously. It also provides a way to revert changes and review the history of changes made to the code, making it easier to debug issues and understand the evolution of the project.

Git is based on the concept of commits, which are snapshots of the code at a particular point in time. Each commit represents a set of changes made to the code, along with a commit message that describes the changes. These commits are stored in a repository, which can be hosted on a remote server or on the developer's local machine.

Git provides a powerful set of commands for managing a code repository, including branching, merging, and rebasing. Branching allows developers to work on different features or bug fixes in isolation, while merging combines the changes from one branch into another. Rebasing allows developers to reapply their changes on top of the latest version of the code, which can simplify the merging process.

In summary, Git is an essential tool for modern software development, providing developers with the ability to track changes, collaborate with others, and manage the evolution of their code over time.
In Git, a feature is typically a new piece of functionality that you are working on. Features are usually developed in their own branch, separate from the main development branch, and are merged back into the main branch once they are complete.

The use of feature branches provides a number of benefits, including:

Isolation of changes: By developing features in their own branches, you can isolate changes and avoid interfering with other developers' work.

Easy collaboration: Feature branches make it easy for multiple developers to work on the same feature simultaneously without causing conflicts.

Improved testing: Features can be tested independently of the main branch, which can help catch issues earlier in the development process.

Traceability: By using feature branches, you can easily track changes related to a specific feature, making it easier to identify when and where changes were made.
Making chnages from contributor account
